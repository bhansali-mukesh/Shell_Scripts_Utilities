#Topic,#Brief
Git#linkhttps://www.atlassian.com/git/tutorials/what-is-git,Git is a Distributed Version Control System.; It Tracks Changes and Not Versions ( using SHA-1 ).; Different Users mantain Different Repositories.; Doesn't Depend on Central/Master Repositories;
History#linkhttps://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git,Developed By Linux Development Community (and in particular Linus Torvalds)^( the creator of Linux); This is one of the Reason Why many of git commands aligned to Linux like : git rm)^( git mv etc.
The 3 Trees#linkhttp://www.darwinbiler.com/understanding-the-3-tree-architecture-of-git/,<img src="https://www.darwinbiler.com/assets/3-tree.jpeg"> </img>; 3 Tree Implementation:; 1. Working Copy; 2. Staged Changes; 3. Repository "
Configuration#linkhttps://ihatetomatoes.net/git-config-tutorial/,3 Levels; 1. System : All Users and All Repositories; 2. Global : Current User)^( All Repositories; 3. Specific Repository;  Set User Name)^( Email)^( Editor etc.
.git Directory#linkhttps://stackoverflow.com/questions/29217859/what-is-the-git-folder,Almost Everything git needs to manage repository; See .git/logs)^( .git/refs)^( .git/hooks)^( .git/HEAD
Auto Completion#linkhttps://stackoverflow.com/questions/12399002/how-to-configure-git-bash-command-line-completion,Automatically Completes git command on pressing TAB like linux native commands; sudo yum install git-core bash-completion; source /etc/bash_completion.d/git
Git Help#linkhttps://www.toolsqa.com/git/git-help/,git help; git help [command_name]
Useful Commands#linkhttps://git-scm.com/docs,1. git init : initialize an existing directory as a Git repository; 2. git status : Show the working tree status; 3. git diff ( --color-words)^( Highlight Changed Words in Color ) : Show changes between commits)^( commit and working tree etc; 4. git add : Add files to Staging; 5. git commit/amend : Record changes to the repository ( --amend)^( modify the most recent commit ); 6. git log : Show commit logs/history; 7. git branch : List(default)^( if no argument passed))^( create(default)^( if branchname is passed))^( or delete(-D) branches; 8. git checkout : Switch branches(-b)^( Will create and checkout) or restore working tree files)^( Syncs to Staged or Repository)^( If Any; 9. git stash/apply : Save modified and staged changes (apply)^( Apply stashed Changes Back); 10. git reset : --soft(UnCommit))^( --mixed(Default)^(UnAdd))^( --hard(Reset HEAD to Point Older Commit)^( DANGEROUS); 11. git rebase : Re-apply commits on top of another base tip; 12. git pull : fetch and merge any commits from the tracking remote branch; 13. git cherry-pick : Apply the changes introduced by some existing commits; 14. git revert : Revert some existing commits(Created new Inverted Commits); 15. git tag : Create)^( list(-l)^( --list))^( delete or verify a tag object signed with GPG; 16. git help : Display help information about Git ( git help [COMMAND])^( for a Specific Command);
git fetch)^( git merge and git pull#linkhttps://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch,git fetch Brings Remote Changes to Local Repository but doesn't update working copy hence always harmless; Doesn't Cause git conflict Anytime; Used to Compare Changes without actually merging and for offline update later by git merge; git merge Applies fetched Changes to Branch/Working Copy in Local; git pull = git fetch + git merge; See In Context of .git Directory; git fetch : .git/refs/remotes/; git merge : .git/refs/heads
git reset and git revert#linkhttps://www.pixelstech.net/article/1549115148-git-reset-vs-git-revert,git reset --hard will reset HEAD to Older commits)^( DISCARDS commits hence result into LOSS of some COMMITS; While git revert will create a NEW INVERTED COMMIT to Neutralize the affect of Older Commits;
